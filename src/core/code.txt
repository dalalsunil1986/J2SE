Variables:
		short a = 10;
		float b = (float) 4.5;
		double c = 11.56;
		char d = 'A';
		boolean e = false;
		
		System.out.println(a);
		System.out.println(b);
		System.out.println(c);
		System.out.println(d);
		System.out.println(e);
User Input:		
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter some no:");
		int no=scan.nextInt();
		
		System.out.println("Entered value is:");
		System.out.println(no);
Math and Arithmetic Operators:
		int x,y;
		x=20;
		y=30;
		double answer=x+y;
		System.out.println("answer is:"+answer);
Increment and assignment operator:		
		int x=10;
		x+=5;//addition
		System.out.println(x);		
Logical Operators:
		int sub1=20;
		int sub2=60;
		if((sub1<=35) || (sub2<=35))
		{
			System.out.println("the condition is true");
		}
		else{
			System.out.println("the condition is false");
		}
					
switch statement:			
		int score = 90;
		switch (score) {
		case 100:
			///
		case 90:
			System.out.println("Excellent");
			break;
		case 80:
			System.out.println("Very Good");
			break;
		case 70:
			System.out.println("Keep It Up");
			break;

		case 60:
			System.out.println("Can do better");
			break;

		case 40:
			System.out.println("You Passed");
			break;
		case 35:
			System.out.println("Border pass");
			break;

		default:
			System.out.println("The gradesare not defined");
			break;

		}
while:
		int a = 0;
		while(a<=1000000)
		{
			System.out.println(a);
			a++;
		}
								
do-while:
int a = 0;
		while(a<=10)
		{
			System.out.println(a);
			a++;
		}
		
		System.out.println("==============");
		
		int b=0;
		do{
			System.out.println(b);
			b++;
		}while(b<=10);
		
Arrays:
		int[] myintarray = {100,31,26,48,52};
	//	System.out.println(myintarray[2]);//26 index is 2
	
		int index=0;
		while(index<5)
		{
			System.out.println(myintarray[index]);
			index++;
		}
for loop:
		int[] myintarray={100,31,26,48,52};
		for(int element:myintarray)
		{
			System.out.println(element);
		}
Strings:
		String myString = "hello world";
		int myStringLength = myString.length();
		String myStringLowerCase = myString.toLowerCase();
		String myStringUpperCase = myString.toUpperCase();

		System.out.println(myString);
		System.out.println(myStringLength);
		System.out.println(myString.replace('e', 'a'));// old-new = replace
		
Recursion:
		public static int factorial(int N) {
		if (N <= 1)
			return 1;
		else return(N*factorial(N-1));
	}

	public static void main(String[] args) {
		System.out.println(factorial(5));
	}
ArrayList:
		int simple_array[] = new int[5];
		ArrayList<Integer> myList = new ArrayList<Integer>(5);
		myList.add(1);
		myList.add(5);
		myList.add(3);
		myList.add(25);
		myList.add(93);
		// myList.remove(2);
		// myList.clear();
		// myList.set(0, 100);
		for (Integer x : myList)
			System.out.println(x);
		System.out.println("size=" + myList.size());
LinkedList:
		LinkedList<String> name = new LinkedList<String>();
		name.add("patrik");
		name.add("mark");
		name.add("tom");
		name.add("john");
		// name.addFirst("");
		// name.addLast("");
		// name.removeLast();
		// name.removeFirst();
		// name.clear();
		// name.add(1, "index1");
		// name.remove(1);
		System.out.println(name.size());
		for(String x: name)
			System.out.println(x);
ListIterator:
		ArrayList<String> names = new ArrayList<String>();
		names.add("mark");
		names.add("tom");
		names.add("john");
		names.add("john");
		names.add("patrik");
		ListIterator<String> itr=names.listIterator();
		while(itr.hasNext())
			System.out.println(itr.next());
		System.out.println();
		while(itr.hasPrevious())
			System.out.println(itr.previous());
							
HashSet:
		HashSet<String> name = new HashSet<String>();
		name.add("mark");
		name.add("mark");
		name.add("jack");
		name.add("july");
		name.add("patrik"); // compiled but not accessed bcoz duplicate hides
		name.clear();
		// name.(. suggestions)
		Iterator<String> itr=name.iterator();
		
		while(itr.hasNext())
			System.out.println(itr.next());
		//here previous not  available ok
Method calling:
public static void main(String[] args) {
		myFirstMethod();
	}
	public static void myFirstMethod(){
		System.out.println("Hello world");
	}
Parameter Passing:
int sum=Add(100,201,211);
		int res=sum*15;
		System.out.println(sum);
		System.out.println(res);
	}
	public static String sayHello(String name){
		return "Hello"+name;
	}
	public static int Add(int a,int b,int c){
		return a+b+c;
	}
Classes and Objects:
//Setters and getters for student class
//int id,String name,int age
Student mark=new Student();
		Student tom=new Student();
		mark.setId(1);
		mark.setName("mark");
		mark.setAge(15);
		tom.setId(2);
		tom.setName("tom");
		tom.setAge(18);
		System.out.println(mark.getName()+" is "+mark.getAge()+" years old");
		System.out.println(tom.getName()+" is "+tom.getAge()+" years old");

Constructor:(1 method two constructors)
Cube cube1 = new Cube();
		System.out.println(cube1.getCubeVolume());
		Cube cube2 = new Cube(20, 20, 20);
		System.out.println(cube2.getCubeVolume());
Method Overloading:
public static void main(String[] args) {
		System.out.println(Add(1,36));
		System.out.println(Add(5.656,3.456));
		System.out.println(Add("Hello","World"));
	}

	public static int Add(int a, int b) {
		return a + b;
	}
	public static double Add(double a,double b){
		return a+b;
	}
	public static String Add(String a,String b){
		return a+b;
	}
static keyword in java:
public static void main(String[] args) {
		Hello hello = new Hello();
		hello.age = 10;
		System.out.println(hello.age);
		System.out.println(Hello.DoSomething("Hi YouTube"));
		System.out.println(hello.DoSomethingElse("Hello world"));
		System.out.println();
	}
staic example brief:
Students mark = new Students();
		Students tom = new Students();
		
		System.out.println(mark.getNoOfStudents());
		System.out.println(tom.getNoOfStudents());
		System.out.println(Students.getNoOfStudents());
final keyword in java:
public static void main(String[] args) {
		Hello1 hel = new Hello1();//compiled
//		hel.number=20;//warning bcoz number declared final cannot use
		
	}
Inheritance:
Rectangle rec = new Rectangle();
		Triangle tri = new Triangle();
		rec.set_values(10, 10);
		tri.set_values(10, 10);
		System.out.println(rec.area());
		System.out.println(tri.area());
Polymorphism:
Bank abc=new Bank_ABC();
		Bank def=new Bank_DEF();
		Bank xyz=new Bank_XYZ();
		System.out.println(abc.getInterestRate());
		System.out.println(def.getInterestRate());
		System.out.println(xyz.getInterestRate());
																						